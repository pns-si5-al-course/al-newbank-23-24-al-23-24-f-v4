version: '3'

networks:
  neobank:
    driver: bridge

services:
  db:
    image: postgres:latest
    container_name: postgres
    environment:
      - POSTGRES_PASSWORD=postgres
    volumes:
      - ./pgdata:/pgdata
    ports:
      - "5433:5432"
    networks:
      - neobank
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  neo-bank:
    image: neobank
    build:
      context: ./neo-bank-v4
      dockerfile: Dockerfile.production
    ports:
      - "3000:3000"
    networks:
      - neobank
    depends_on:
      db:
        condition: service_healthy
      mongo_db_account:
        condition: service_healthy
  
  #backend_transaction:
    #image: backend_transaction
    #build:
      #context: ./backend_transaction
      #dockerfile: Dockerfile
    #ports:
      #- "3006:3006"
    #networks:
      #- neobank
    #depends_on:
      #db:
        #condition: service_healthy

  pgadmin:
    image: dpage/pgadmin4
    restart: always
    container_name: nest-pgadmin4
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@admin.com
      - PGADMIN_DEFAULT_PASSWORD=pgadmin4
    ports:
      - '5050:80'
    networks:
      - neobank
    depends_on:
      db:
        condition: service_healthy
    logging:
      driver: none
  
  mongo_db_account:
    image: "mongo:5.0.0"
    restart: always
    networks:
      - neobank
    ports:
      - 27018:27017
    healthcheck:
      test: ["CMD", "mongo", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5
    logging:
      driver: none
  
  
  transaction_processor:
    image: transaction_processor
    build:
      context: ./backend_transaction_processor
      dockerfile: Dockerfile
    ports:
      - "3007:3007"
    networks:
      - neobank

  transaction_validator:
    image: transaction_validator
    build:
      context: ./backend_transaction_validator
      dockerfile: Dockerfile
    ports:
      - "3008:3008"
    networks:
      - neobank

  stock_exchange:
    image: stock_exchange
    build:
      context: ./stock_exchange
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    networks:
      - neobank
    depends_on:
      - redis

  redis:
    image: "redis:alpine"
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - neobank

  trader:
    image: trader
    build:
      context: ./trader
      dockerfile: Dockerfile
    ports:
      - "8001:8001"
    networks:
      - neobank
    depends_on:
      - mongo_db_simulations

  mongo_db_simulations:
    image: "mongo:5.0.0"
    container_name: mongo_db_simulations
    ports:
      - "27019:27017"
    networks:
      - neobank
    healthcheck:
      test: ["CMD", "mongo", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5
    logging:
      driver: none

  transaction_manager:
    image: transaction_manager
    build:
      context: ./transaction_manager
      dockerfile: Dockerfile
    depends_on:
      mongo_db_manager: 
        condition: service_healthy
    ports:
      - "3009:3009"
    networks:
      - neobank


  transaction_manager_replica:
    image: transaction_manager
    build:
      context: ./transaction_manager
      dockerfile: Dockerfile
    depends_on:
      mongo_db_manager: 
        condition: service_healthy
    ports:
      - "3010:3009"
    networks:
      - neobank


  mongo_db_manager:
    image: "mongo:5.0.0"
    restart: always
    networks:
      - neobank
    ports:
      - 27019:27017
    healthcheck:
      test: ["CMD", "mongo", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5
    logging:
      driver: none

  prometheus:
    image: prom/prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - neobank

  grafana:
    image: grafana/grafana
    ports:
      - "9000:3000"
    networks:
      - neobank

  nginx:
    image: nginx:latest
    ports:
      - "100:80"
    networks:
    - neobank
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    restart: unless-stopped
    depends_on:
      - transaction_manager
      - transaction_manager_replica